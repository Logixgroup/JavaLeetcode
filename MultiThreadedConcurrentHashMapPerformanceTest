import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class MultiThreadedConcurrentHashMapPerformanceTest {

    private static final int NUM_ITERATIONS = 1_000_000;
    private static final int NUM_THREADS = 10;
//ArvindHasija
    public static void main(String[] args) throws InterruptedException {
        System.out.println("Testing Synchronized HashMap:");
        testSynchronizedHashMap();

        System.out.println("\nTesting ConcurrentHashMap:");
        testConcurrentHashMap();
    }

    // Test for Synchronized HashMap with CRUD operations
    private static void testSynchronizedHashMap() throws InterruptedException {
        HashMap<Integer, Integer> syncMap = new HashMap<>();
        Object lock = new Object();

        ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);

        // Test Create (Insert)
        long startTime = System.nanoTime();
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(() -> {
                for (int j = 0; j < NUM_ITERATIONS / NUM_THREADS; j++) {
                    synchronized (lock) {
                        syncMap.put(j, j);
                    }
                }
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        long endTime = System.nanoTime();
        System.out.println("Synchronized HashMap Create Time: " + (endTime - startTime) + " ns");

        // Test Read
        executor = Executors.newFixedThreadPool(NUM_THREADS);
        startTime = System.nanoTime();
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(() -> {
                for (int j = 0; j < NUM_ITERATIONS / NUM_THREADS; j++) {
                    synchronized (lock) {
                        syncMap.get(j);
                    }
                }
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        endTime = System.nanoTime();
        System.out.println("Synchronized HashMap Read Time: " + (endTime - startTime) + " ns");

        // Test Update
        executor = Executors.newFixedThreadPool(NUM_THREADS);
        startTime = System.nanoTime();
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(() -> {
                for (int j = 0; j < NUM_ITERATIONS / NUM_THREADS; j++) {
                    synchronized (lock) {
                        syncMap.put(j, j + 1); // Update value
                    }
                }
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        endTime = System.nanoTime();
        System.out.println("Synchronized HashMap Update Time: " + (endTime - startTime) + " ns");

        // Test Delete
        executor = Executors.newFixedThreadPool(NUM_THREADS);
        startTime = System.nanoTime();
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(() -> {
                for (int j = 0; j < NUM_ITERATIONS / NUM_THREADS; j++) {
                    synchronized (lock) {
                        syncMap.remove(j);
                    }
                }
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        endTime = System.nanoTime();
        System.out.println("Synchronized HashMap Delete Time: " + (endTime - startTime) + " ns");
    }

    // Test for ConcurrentHashMap with CRUD operations
    private static void testConcurrentHashMap() throws InterruptedException {
        ConcurrentHashMap<Integer, Integer> concurrentMap = new ConcurrentHashMap<>();

        ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);

        // Test Create (Insert)
        long startTime = System.nanoTime();
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(() -> {
                for (int j = 0; j < NUM_ITERATIONS / NUM_THREADS; j++) {
                    concurrentMap.put(j, j);
                }
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        long endTime = System.nanoTime();
        System.out.println("ConcurrentHashMap Create Time: " + (endTime - startTime) + " ns");

        // Test Read
        executor = Executors.newFixedThreadPool(NUM_THREADS);
        startTime = System.nanoTime();
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(() -> {
                for (int j = 0; j < NUM_ITERATIONS / NUM_THREADS; j++) {
                    concurrentMap.get(j);
                }
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        endTime = System.nanoTime();
        System.out.println("ConcurrentHashMap Read Time: " + (endTime - startTime) + " ns");

        // Test Update
        executor = Executors.newFixedThreadPool(NUM_THREADS);
        startTime = System.nanoTime();
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(() -> {
                for (int j = 0; j < NUM_ITERATIONS / NUM_THREADS; j++) {
                    concurrentMap.put(j, j + 1); // Update value
                }
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        endTime = System.nanoTime();
        System.out.println("ConcurrentHashMap Update Time: " + (endTime - startTime) + " ns");

        // Test Delete
        executor = Executors.newFixedThreadPool(NUM_THREADS);
        startTime = System.nanoTime();
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(() -> {
                for (int j = 0; j < NUM_ITERATIONS / NUM_THREADS; j++) {
                    concurrentMap.remove(j);
                }
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        endTime = System.nanoTime();
        System.out.println("ConcurrentHashMap Delete Time: " + (endTime - startTime) + " ns");
    }
}